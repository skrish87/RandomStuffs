/*----------------------------------------------------------------
Copyright (c) 2014 Author: Jagadeesh Vasudevamurthy
file: factorial.cpp
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
This file has enumeration class definition
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
All includes here
-----------------------------------------------------------------*/
#include "recursion.h"


/*--------------------------------------------------------
static definition - only once at the start
Change to false, if you don't need verbose
----------------------------------------------------------*/
template <typename T>
bool dstack<T>::_display = false;

bool str::_display = false;


/*----------------------------------------------------------------
Definition of routines of factorial
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
factorial using iteration
-----------------------------------------------------------------*/
long long recursion::factorial_iterative(unsigned n, int& num_mult) {
  long long a = 1;
  num_mult = 0;
  for (int j = n; j > 1; j--) {
    ++num_mult;
    a = a * j;
  }
  return a;
}

/*----------------------------------------------------------------
factorial using recursion
-----------------------------------------------------------------*/
long long recursion::_f_r(unsigned n, int& num_rec){
  if (n <= 1) {
    return 1;
  }
  ++num_rec;
  return (n * _f_r(n - 1, num_rec));
}

long long recursion::factorial_recursion(unsigned n, int& num_rec) {
  return _f_r(n, num_rec);
}

/*----------------------------------------------------------------
factorial using stack
-----------------------------------------------------------------*/
long long recursion::factorial_stack(unsigned n, int& size_of_stack) {
  size_of_stack = 0;
  dstack<int> s;
  while (n > 1) {
    s.push(n--);
    ++size_of_stack;
  }
  long long a = 1;
  while (!(s.isempty())) {
    a = a * s.top();
    s.pop();
  }
  return a;
}

/*----------------------------------------------------------------
num_binary_digit using iteration
0  1
1  1
4  100
15 1111
16 10000
WRITE CODE BELOW
-----------------------------------------------------------------*/


/*----------------------------------------------------------------
num_binary_digit using recursion
WRITE CODE BELOW
-----------------------------------------------------------------*/


/*----------------------------------------------------------------
num_binary_digit using stack
WRITE CODE BELOW
-----------------------------------------------------------------*/



/*----------------------------------------------------------------
fibonacci using iteration
0 1 2 3 4 5 6 7  8   9 10 11 12
0 1 1 2 3 5 8 13 21 34 55 89 144
WRITE CODE BELOW
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
Fibonacci using recursion
WRITE CODE BELOW
-----------------------------------------------------------------*/

/*----------------------------------------------------------------
Fibonacci using stack
WRITE CODE BELOW
-----------------------------------------------------------------*/



/*----------------------------------------------------------------
hanoi using recursion

1 -> 3
1 -> 2
3 -> 2
1 -> 3
2 -> 1
2 -> 3
1 -> 3
Number of itr = 7
WRITE CODE BELOW
-----------------------------------------------------------------*/




/*----------------------------------------------------------------
hanoi using stack
WRITE CODE BELOW
-----------------------------------------------------------------*/

//EOF

